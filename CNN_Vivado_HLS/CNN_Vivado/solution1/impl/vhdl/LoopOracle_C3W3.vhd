-- ==============================================================
-- File generated on Thu Apr 04 23:06:48 CEST 2019
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2018.3 (64-bit)
-- SW Build 2405991 on Thu Dec  6 23:36:41 MST 2018
-- IP Build 2404404 on Fri Dec  7 01:43:56 MST 2018
-- Copyright 1986-2018 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity LoopOracle_C3W3_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of LoopOracle_C3W3_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101110011010011010110101000", 
    1 => "00111110010100000111110010000101", 
    2 => "10111110000011000111111000101000", 
    3 => "00111110000111000010100011110110", 
    4 => "10111110100001111010000011111001", 
    5 => "10111011010110000100010011010000", 
    6 => "10111101000111101000001111100100", 
    7 => "10111110000111111000101000001001", 
    8 => "00111101001001001010100011000001", 
    9 => "00111110001110100000111110010001", 
    10 => "00111110011100101111111011000101", 
    11 => "00111110000001000011001011001010", 
    12 => "10111101111011111101001000100000", 
    13 => "10111101011100110100110101101010", 
    14 => "10111101100000010110111100000000", 
    15 => "00111101100111000000111010111111", 
    16 => "10111111000100011100010000110011", 
    17 => "10111110100000111010111110111000", 
    18 => "10111101100000101101111000000001", 
    19 => "10111110000100101111000110101010", 
    20 => "00111111001000000100100000010111", 
    21 => "10111110001101111000000000110100", 
    22 => "10111110100000111010001010011100", 
    23 => "10111101101111101010101100110110", 
    24 => "00111110000010101010011001001100", 
    25 => "10111101010011100111000000111011", 
    26 => "00111101110001110100010100111001", 
    27 => "10111101011111000101000001001000", 
    28 => "10111111001111110111110011101110", 
    29 => "10111110011111110111110011101110", 
    30 => "10111101100111100001101100001001", 
    31 => "00111100100101010001100000101011", 
    32 => "00111110101001111110111110011110", 
    33 => "00111111000010011010000000100111", 
    34 => "00111110111000100010011010000001", 
    35 => "10111110010100000111110010000101", 
    36 => "00111101111011001000101101000100", 
    37 => "00111110000100001111111110010111", 
    38 => "10111101111011101100101111111011", 
    39 => "10111110001010101100110110011111", 
    40 => "00111110001111110100100010000000", 
    41 => "00111101100010110000111100101000", 
    42 => "00111101111110101010110011011010", 
    43 => "10111110001100001010001111010111", 
    44 => "00111111000100011101111001101010", 
    45 => "10111110001110011100000011101100", 
    46 => "00111110111100010101101101010111", 
    47 => "10111110000011101000101001110010", 
    48 => "00111101001101010000101100001111", 
    49 => "00111110001000100011001110011100", 
    50 => "00111101110011011001111010000100", 
    51 => "10111101110111011100110001100100", 
    52 => "00111101011110010000100101101100", 
    53 => "00111110010111101110110011000000", 
    54 => "00111100110001010110110101011101", 
    55 => "00111101100101100101001010111101", 
    56 => "00111110011100001010001111010111", 
    57 => "10111110010111110010000100101101", 
    58 => "10111110001111000001101111011010", 
    59 => "10111110010010101101101010111010", 
    60 => "00111101001100001111001001111100", 
    61 => "00111101101010110000001000001100", 
    62 => "00111101100001001110101001001011", 
    63 => "00111100011000000111010111110111", 
    64 => "10111111011010100110010011000011", 
    65 => "10111111100101011001111010000100", 
    66 => "00111100001111000110101001111111", 
    67 => "10111101101000001001000000101110", 
    68 => "10111101100010101010011001001100", 
    69 => "10111110100001001100001011111000", 
    70 => "10111101000100110000101111100001", 
    71 => "10111101011011011111101001000100", 
    72 => "10111110011010101011001101101000", 
    73 => "10111101010010110010100101011111", 
    74 => "10111110011111110111110011101110", 
    75 => "00111110011110011111010101011010", 
    76 => "00111101001011101110011000110010", 
    77 => "00111110010110100000001001110101", 
    78 => "00111101001110101100011100010001", 
    79 => "10111101110100011011011100010111", 
    80 => "00111101010001000011001011001010", 
    81 => "10111101011010110001110001000011", 
    82 => "10111110101001110010101100000010", 
    83 => "00111101010110010001011010000111", 
    84 => "00111101101011011010101110011111", 
    85 => "00111101101100000101010100110010", 
    86 => "10111101111011110000000001101001", 
    87 => "00111110001000010010110101110111", 
    88 => "10111101101001001010100011000001", 
    89 => "10111110011011100110001100100000", 
    90 => "10111110001000010111110000011100", 
    91 => "00111110001001001000111010001010", 
    92 => "10111110000001111111110010111001", 
    93 => "10111011111111111001011100100100", 
    94 => "10111101011110110001010110110101", 
    95 => "00111100101011100111110101010110", 
    96 => "10111110010000101100001111001010", 
    97 => "10111110101000100101101011101110", 
    98 => "00111110011010100111111011111010", 
    99 => "10111101111011001111010000011111", 
    100 => "00111100100010011010000000100111", 
    101 => "10111110111111100110100110101101", 
    102 => "10111110010111110010000100101101", 
    103 => "00111110100001100101100101001011", 
    104 => "10111110011000011011000010001010", 
    105 => "00111101101101011101110011000110", 
    106 => "00111101111111100101110010010010", 
    107 => "00111100011011110011010011010111", 
    108 => "00111111000011100111000000111011", 
    109 => "10111101011001111101010101100111", 
    110 => "00111110101011010100111111011111", 
    111 => "10111110101011100010111010110010", 
    112 => "10111101101110000001110101111110", 
    113 => "10111100110110111000101110101100", 
    114 => "00111110111100101110010010001111", 
    115 => "10111111000010111110000011011111", 
    116 => "00111101001011010100001011000100", 
    117 => "00111101101111101010101100110110", 
    118 => "10111110001110010101100000010000", 
    119 => "10111110011001010001000110011101", 
    120 => "00111100101000111101011100001010", 
    121 => "00111101100111011110011010011011", 
    122 => "10111110000101001010111101001111", 
    123 => "10111101000111001110000001110110", 
    124 => "00111111010011110101010110011011", 
    125 => "10111110101000100010011010000001", 
    126 => "00111110110100110010011000011000", 
    127 => "10111111000110000000100111010101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity LoopOracle_C3W3 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of LoopOracle_C3W3 is
    component LoopOracle_C3W3_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    LoopOracle_C3W3_rom_U :  component LoopOracle_C3W3_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


