# This script segment is generated automatically by AutoPilot

set id 3
set name LoopOracle_fadd_32ns_32ns_32_4_full_dsp_1
set corename simcore_fadd
set op fadd
set stage_num 4
set max_latency -1
set registered_input 1
set impl_style full_dsp
set Futype4reduceCEFanout 1
set clk_width 1
set clk_signed 0
set reset_width 1
set reset_signed 0
set in0_width 32
set in0_signed 0
set in1_width 32
set in1_signed 0
set ce_width 1
set ce_signed 0
set out_width 32
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_fadd] == "ap_gen_simcore_fadd"} {
eval "ap_gen_simcore_fadd { \
    id ${id} \
    name ${name} \
    corename ${corename} \
    op ${op} \
    reset_level 1 \
    sync_rst true \
    stage_num ${stage_num} \
    max_latency ${max_latency} \
    registered_input ${registered_input} \
    style ${impl_style} \
    Futype4reduceCEFanout ${Futype4reduceCEFanout} \
    clk_width ${clk_width} \
    clk_signed ${clk_signed} \
    reset_width ${reset_width} \
    reset_signed ${reset_signed} \
    in0_width ${in0_width} \
    in0_signed ${in0_signed} \
    in1_width ${in1_width} \
    in1_signed ${in1_signed} \
    ce_width ${ce_width} \
    ce_signed ${ce_signed} \
    out_width ${out_width} \
}"
} else {
puts "@W \[IMPL-100\] Cannot find ap_gen_simcore_fadd, check your AutoPilot builtin lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
	::AP::rtl_comp_handler ${name}
}


set op fadd
set corename FAddSub
if {${::AESL::PGuard_autocg_gen} && (${::AESL::PGuard_autocg_fpip} || ${::AESL::PGuard_autocg_fpv6en} || ${::AESL::PGuard_autocg_hpen})} {
if {[info proc ::AESL_LIB_XILINX_FPV6::fpv6_gen] == "::AESL_LIB_XILINX_FPV6::fpv6_gen"} {
eval "::AESL_LIB_XILINX_FPV6::fpv6_gen { \
    id ${id} \
    name ${name} \
    corename ${corename} \
    op ${op} \
    reset_level 1 \
    sync_rst true \
    stage_num ${stage_num} \
    max_latency ${max_latency} \
    registered_input ${registered_input} \
    style ${impl_style} \
    Futype4reduceCEFanout ${Futype4reduceCEFanout} \
    clk_width ${clk_width} \
    clk_signed ${clk_signed} \
    reset_width ${reset_width} \
    reset_signed ${reset_signed} \
    in0_width ${in0_width} \
    in0_signed ${in0_signed} \
    in1_width ${in1_width} \
    in1_signed ${in1_signed} \
    ce_width ${ce_width} \
    ce_signed ${ce_signed} \
    out_width ${out_width} \
}"
} else {
puts "@W \[IMPL-101\] Cannot find ::AESL_LIB_XILINX_FPV6::fpv6_gen, check your platform lib"
}
}


set id 4
set name LoopOracle_fmul_32ns_32ns_32_3_max_dsp_1
set corename simcore_fmul
set op fmul
set stage_num 3
set max_latency -1
set registered_input 1
set impl_style max_dsp
set Futype4reduceCEFanout 1
set clk_width 1
set clk_signed 0
set reset_width 1
set reset_signed 0
set in0_width 32
set in0_signed 0
set in1_width 32
set in1_signed 0
set ce_width 1
set ce_signed 0
set out_width 32
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_fmul] == "ap_gen_simcore_fmul"} {
eval "ap_gen_simcore_fmul { \
    id ${id} \
    name ${name} \
    corename ${corename} \
    op ${op} \
    reset_level 1 \
    sync_rst true \
    stage_num ${stage_num} \
    max_latency ${max_latency} \
    registered_input ${registered_input} \
    style ${impl_style} \
    Futype4reduceCEFanout ${Futype4reduceCEFanout} \
    clk_width ${clk_width} \
    clk_signed ${clk_signed} \
    reset_width ${reset_width} \
    reset_signed ${reset_signed} \
    in0_width ${in0_width} \
    in0_signed ${in0_signed} \
    in1_width ${in1_width} \
    in1_signed ${in1_signed} \
    ce_width ${ce_width} \
    ce_signed ${ce_signed} \
    out_width ${out_width} \
}"
} else {
puts "@W \[IMPL-100\] Cannot find ap_gen_simcore_fmul, check your AutoPilot builtin lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
	::AP::rtl_comp_handler ${name}
}


set op fmul
set corename FMul
if {${::AESL::PGuard_autocg_gen} && (${::AESL::PGuard_autocg_fpip} || ${::AESL::PGuard_autocg_fpv6en} || ${::AESL::PGuard_autocg_hpen})} {
if {[info proc ::AESL_LIB_XILINX_FPV6::fpv6_gen] == "::AESL_LIB_XILINX_FPV6::fpv6_gen"} {
eval "::AESL_LIB_XILINX_FPV6::fpv6_gen { \
    id ${id} \
    name ${name} \
    corename ${corename} \
    op ${op} \
    reset_level 1 \
    sync_rst true \
    stage_num ${stage_num} \
    max_latency ${max_latency} \
    registered_input ${registered_input} \
    style ${impl_style} \
    Futype4reduceCEFanout ${Futype4reduceCEFanout} \
    clk_width ${clk_width} \
    clk_signed ${clk_signed} \
    reset_width ${reset_width} \
    reset_signed ${reset_signed} \
    in0_width ${in0_width} \
    in0_signed ${in0_signed} \
    in1_width ${in1_width} \
    in1_signed ${in1_signed} \
    ce_width ${ce_width} \
    ce_signed ${ce_signed} \
    out_width ${out_width} \
}"
} else {
puts "@W \[IMPL-101\] Cannot find ::AESL_LIB_XILINX_FPV6::fpv6_gen, check your platform lib"
}
}


set id 5
set name LoopOracle_fcmp_32ns_32ns_1_1_1
set corename simcore_fcmp
set op fcmp
set stage_num 1
set max_latency -1
set registered_input 1
set Futype4reduceCEFanout 1
set in0_width 32
set in0_signed 0
set in1_width 32
set in1_signed 0
set opcode_width 5
set opcode_signed 0
set out_width 1
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_fcmp] == "ap_gen_simcore_fcmp"} {
eval "ap_gen_simcore_fcmp { \
    id ${id} \
    name ${name} \
    corename ${corename} \
    op ${op} \
    reset_level 1 \
    sync_rst true \
    stage_num ${stage_num} \
    max_latency ${max_latency} \
    registered_input ${registered_input} \
    Futype4reduceCEFanout ${Futype4reduceCEFanout} \
    in0_width ${in0_width} \
    in0_signed ${in0_signed} \
    in1_width ${in1_width} \
    in1_signed ${in1_signed} \
    opcode_width ${opcode_width} \
    opcode_signed ${opcode_signed} \
    out_width ${out_width} \
}"
} else {
puts "@W \[IMPL-100\] Cannot find ap_gen_simcore_fcmp, check your AutoPilot builtin lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
	::AP::rtl_comp_handler ${name}
}


set op fcmp
set corename FCmp
if {${::AESL::PGuard_autocg_gen} && (${::AESL::PGuard_autocg_fpip} || ${::AESL::PGuard_autocg_fpv6en} || ${::AESL::PGuard_autocg_hpen})} {
if {[info proc ::AESL_LIB_XILINX_FPV6::fpv6_gen] == "::AESL_LIB_XILINX_FPV6::fpv6_gen"} {
eval "::AESL_LIB_XILINX_FPV6::fpv6_gen { \
    id ${id} \
    name ${name} \
    corename ${corename} \
    op ${op} \
    reset_level 1 \
    sync_rst true \
    stage_num ${stage_num} \
    max_latency ${max_latency} \
    registered_input ${registered_input} \
    Futype4reduceCEFanout ${Futype4reduceCEFanout} \
    in0_width ${in0_width} \
    in0_signed ${in0_signed} \
    in1_width ${in1_width} \
    in1_signed ${in1_signed} \
    opcode_width ${opcode_width} \
    opcode_signed ${opcode_signed} \
    out_width ${out_width} \
}"
} else {
puts "@W \[IMPL-101\] Cannot find ::AESL_LIB_XILINX_FPV6::fpv6_gen, check your platform lib"
}
}


# Memory (RAM/ROM)  definition:
set ID 9
set hasByteEnable 0
set MemName LoopOracle_C1W1_0
set CoreName ap_simcore_mem
set PortList { 1 }
set DataWd 32
set AddrRange 8
set AddrWd 3
set TrueReset 0
set IsROM 1
set ROMData { "00111110011111110111110011101110" "00111111001100011111100010100001" "10111100000110000101111100000111" "10111110100010100111111011111010" "00111111010000111010100100101010" "00111111001001101100001000100111" "10111110001110001000011001011001" "00111110001101010010010101000110" }
set HasInitializer 1
set Initializer $ROMData
set NumOfStage 2
set MaxLatency -1
set DelayBudget 1.352
set ClkPeriod 10
set RegisteredInput 0
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_mem] == "ap_gen_simcore_mem"} {
    eval "ap_gen_simcore_mem { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 1 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
} else {
    puts "@W \[IMPL-102\] Cannot find ap_gen_simcore_mem, check your platform lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
  ::AP::rtl_comp_handler $MemName
}


set CoreName ROM_nP
if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_ROM] == "::AESL_LIB_VIRTEX::xil_gen_ROM"} {
    eval "::AESL_LIB_VIRTEX::xil_gen_ROM { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 1 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
  } else {
    puts "@W \[IMPL-104\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_ROM, check your platform lib"
  }
}


# Memory (RAM/ROM)  definition:
set ID 10
set hasByteEnable 0
set MemName LoopOracle_C2W2
set CoreName ap_simcore_mem
set PortList { 1 }
set DataWd 32
set AddrRange 32
set AddrWd 5
set TrueReset 0
set IsROM 1
set ROMData { "00111110100000000010011101010010" "00111111000100010000011000100101" "00111011011010111110110111111010" "00111110110010111110000011011111" "00111101101111110001010000010010" "10111110010101101101010111010000" "10111110101101010000101100001111" "00111101101111001001111011101101" "00111101100101111100000110111110" "00111110010111011001011111110110" "10111110001100011111100010100001" "10111110101010100111000111011110" "00111111000101010110110101011101" "00111110101011111100010100000101" "10111101100011010001101101110001" "10111110101110111011001011111111" "10111110011001111010000011111001" "10111110100011101011111011100000" "10111110001010110000001000001100" "10111110010100000100100000010111" "10111110100100111011011001000110" "10111110000001011011110000000010" "10111110100111010010000111111111" "10111110100001110100010100111001" "10111110101101100001111001001111" "10111110001100001011111000001110" "10111110110001100010010011011101" "00111110111000110000010101010011" "10111111000000001111111110010111" "00111101100001100101100101001011" "00111110111010000000100111010101" "00111110000111000000111010111111" }
set HasInitializer 1
set Initializer $ROMData
set NumOfStage 2
set MaxLatency -1
set DelayBudget 1.352
set ClkPeriod 10
set RegisteredInput 0
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_mem] == "ap_gen_simcore_mem"} {
    eval "ap_gen_simcore_mem { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 1 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
} else {
    puts "@W \[IMPL-102\] Cannot find ap_gen_simcore_mem, check your platform lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
  ::AP::rtl_comp_handler $MemName
}


set CoreName ROM_nP
if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_ROM] == "::AESL_LIB_VIRTEX::xil_gen_ROM"} {
    eval "::AESL_LIB_VIRTEX::xil_gen_ROM { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 1 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
  } else {
    puts "@W \[IMPL-104\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_ROM, check your platform lib"
  }
}


# Memory (RAM/ROM)  definition:
set ID 11
set hasByteEnable 0
set MemName LoopOracle_C3B4
set CoreName ap_simcore_mem
set PortList { 1 }
set DataWd 32
set AddrRange 8
set AddrWd 3
set TrueReset 0
set IsROM 1
set ROMData { "10111101110001101101110001011101" "00111110000011001100110011001101" "10111110101010111001001000111010" "10111110100010010010101000110000" "00111110110010111001111101010110" "00111101111010000111001010110000" "10111101101000101101000011100101" "00111101001000110000010101010011" }
set HasInitializer 1
set Initializer $ROMData
set NumOfStage 2
set MaxLatency -1
set DelayBudget 1.352
set ClkPeriod 10
set RegisteredInput 0
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_mem] == "ap_gen_simcore_mem"} {
    eval "ap_gen_simcore_mem { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 1 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
} else {
    puts "@W \[IMPL-102\] Cannot find ap_gen_simcore_mem, check your platform lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
  ::AP::rtl_comp_handler $MemName
}


set CoreName ROM_nP
if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_ROM] == "::AESL_LIB_VIRTEX::xil_gen_ROM"} {
    eval "::AESL_LIB_VIRTEX::xil_gen_ROM { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 1 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
  } else {
    puts "@W \[IMPL-104\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_ROM, check your platform lib"
  }
}


# Memory (RAM/ROM)  definition:
set ID 12
set hasByteEnable 0
set MemName LoopOracle_C3W3
set CoreName ap_simcore_mem
set PortList { 1 }
set DataWd 32
set AddrRange 128
set AddrWd 7
set TrueReset 0
set IsROM 1
set ROMData { "00111101110011010011010110101000" "00111110010100000111110010000101" "10111110000011000111111000101000" "00111110000111000010100011110110" "10111110100001111010000011111001" "10111011010110000100010011010000" "10111101000111101000001111100100" "10111110000111111000101000001001" "00111101001001001010100011000001" "00111110001110100000111110010001" "00111110011100101111111011000101" "00111110000001000011001011001010" "10111101111011111101001000100000" "10111101011100110100110101101010" "10111101100000010110111100000000" "00111101100111000000111010111111" "10111111000100011100010000110011" "10111110100000111010111110111000" "10111101100000101101111000000001" "10111110000100101111000110101010" "00111111001000000100100000010111" "10111110001101111000000000110100" "10111110100000111010001010011100" "10111101101111101010101100110110" "00111110000010101010011001001100" "10111101010011100111000000111011" "00111101110001110100010100111001" "10111101011111000101000001001000" "10111111001111110111110011101110" "10111110011111110111110011101110" "10111101100111100001101100001001" "00111100100101010001100000101011" "00111110101001111110111110011110" "00111111000010011010000000100111" "00111110111000100010011010000001" "10111110010100000111110010000101" "00111101111011001000101101000100" "00111110000100001111111110010111" "10111101111011101100101111111011" "10111110001010101100110110011111" "00111110001111110100100010000000" "00111101100010110000111100101000" "00111101111110101010110011011010" "10111110001100001010001111010111" "00111111000100011101111001101010" "10111110001110011100000011101100" "00111110111100010101101101010111" "10111110000011101000101001110010" "00111101001101010000101100001111" "00111110001000100011001110011100" "00111101110011011001111010000100" "10111101110111011100110001100100" "00111101011110010000100101101100" "00111110010111101110110011000000" "00111100110001010110110101011101" "00111101100101100101001010111101" "00111110011100001010001111010111" "10111110010111110010000100101101" "10111110001111000001101111011010" "10111110010010101101101010111010" "00111101001100001111001001111100" "00111101101010110000001000001100" "00111101100001001110101001001011" "00111100011000000111010111110111" "10111111011010100110010011000011" "10111111100101011001111010000100" "00111100001111000110101001111111" "10111101101000001001000000101110" "10111101100010101010011001001100" "10111110100001001100001011111000" "10111101000100110000101111100001" "10111101011011011111101001000100" "10111110011010101011001101101000" "10111101010010110010100101011111" "10111110011111110111110011101110" "00111110011110011111010101011010" "00111101001011101110011000110010" "00111110010110100000001001110101" "00111101001110101100011100010001" "10111101110100011011011100010111" "00111101010001000011001011001010" "10111101011010110001110001000011" "10111110101001110010101100000010" "00111101010110010001011010000111" "00111101101011011010101110011111" "00111101101100000101010100110010" "10111101111011110000000001101001" "00111110001000010010110101110111" "10111101101001001010100011000001" "10111110011011100110001100100000" "10111110001000010111110000011100" "00111110001001001000111010001010" "10111110000001111111110010111001" "10111011111111111001011100100100" "10111101011110110001010110110101" "00111100101011100111110101010110" "10111110010000101100001111001010" "10111110101000100101101011101110" "00111110011010100111111011111010" "10111101111011001111010000011111" "00111100100010011010000000100111" "10111110111111100110100110101101" "10111110010111110010000100101101" "00111110100001100101100101001011" "10111110011000011011000010001010" "00111101101101011101110011000110" "00111101111111100101110010010010" "00111100011011110011010011010111" "00111111000011100111000000111011" "10111101011001111101010101100111" "00111110101011010100111111011111" "10111110101011100010111010110010" "10111101101110000001110101111110" "10111100110110111000101110101100" "00111110111100101110010010001111" "10111111000010111110000011011111" "00111101001011010100001011000100" "00111101101111101010101100110110" "10111110001110010101100000010000" "10111110011001010001000110011101" "00111100101000111101011100001010" "00111101100111011110011010011011" "10111110000101001010111101001111" "10111101000111001110000001110110" "00111111010011110101010110011011" "10111110101000100010011010000001" "00111110110100110010011000011000" "10111111000110000000100111010101" }
set HasInitializer 1
set Initializer $ROMData
set NumOfStage 2
set MaxLatency -1
set DelayBudget 1.352
set ClkPeriod 10
set RegisteredInput 0
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_mem] == "ap_gen_simcore_mem"} {
    eval "ap_gen_simcore_mem { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 1 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
} else {
    puts "@W \[IMPL-102\] Cannot find ap_gen_simcore_mem, check your platform lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
  ::AP::rtl_comp_handler $MemName
}


set CoreName ROM_nP
if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_ROM] == "::AESL_LIB_VIRTEX::xil_gen_ROM"} {
    eval "::AESL_LIB_VIRTEX::xil_gen_ROM { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 1 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
  } else {
    puts "@W \[IMPL-104\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_ROM, check your platform lib"
  }
}


# Memory (RAM/ROM)  definition:
set ID 13
set hasByteEnable 0
set MemName LoopOracle_FCW5
set CoreName ap_simcore_mem
set PortList { 1 }
set DataWd 32
set AddrRange 384
set AddrWd 9
set TrueReset 0
set IsROM 1
set ROMData { "00111011011011111001011000100101" "10111101000001011010001111100100" "00111101001011001110100110100011" "10111011100000001000100100100111" "10111011101010101001100110011100" "00111101100100100100100111100100" "10111101001101001110010001000011" "00111101100100000111010010100111" "00111101100100001110000010101000" "10111100111011110100011110110110" "10111011001101000001011111001010" "00111100101001111100101111110111" "10111101001111111110100011101110" "10111011101000001000000111101011" "00111100100110111000001000111101" "00111101100011010110000100101100" "10111101001001001100101001001111" "10111101100010001000010100001010" "10111100010110001011000111011101" "00111101100001011010110001000111" "00111101000101000000010001100100" "10111101010010000001011111111100" "00111001101000111110100001111101" "00111101100100110010101001001001" "00111111100000100111000111011110" "10111101001100011110010010110100" "10111100111100000101101001110001" "10111101010000101010111111011110" "00111101011100111111001100010111" "00111101110101000111101011100001" "10111110000011000000000001010100" "10111101110100010001100111001110" "10111101001111010101010001010100" "10111100101101000111010000010000" "00111101001111001101101110111110" "10111101010011110101111101001110" "10111101010011111010000001010001" "00111101000100010110101110011000" "00111100110011110010000001100100" "00111100011010110100001000000011" "10111101000001111111000000100100" "10111101010100010111100000101101" "10111100011100000110011100000110" "00111100101001010000111110000100" "00111101100001011101111010011100" "10111100000011101111110000011100" "10111101100100001011111110100001" "00111101001010101110001010010111" "10111110101101100100110101111111" "10111110001001101011011110101010" "10111101100000010000101101100011" "10111101111100100111011001110101" "10111110000001011001011101001110" "10111110001110110010110101001101" "10111100111001010110011010001100" "10111100111110001110000110010011" "00111110000111110000111011010100" "00111101011110110011100001010000" "00111100000010011011001101110011" "00111100100010100011010100001101" "00111101101110001111111011101111" "10111011111000111011111010000001" "10111100111111110011110011110111" "00111001101110100011111110000001" "00111100111100001001101101110100" "00111101000000000010101011111110" "00111011000101110111101011011011" "00111100111111100111011111010101" "00111100101001101110000100010101" "10111100001011010001000001101111" "10111101010101011110001010001011" "00111101001011010010011001110100" "10111101000110101110010011110011" "00111100010111100011001100100111" "10111101100100001010101010101000" "00111110000111111010000110100001" "00111011111110101000000100111011" "10111100101000011010000011001111" "10111101111101010100100111111001" "10111110000001111101101010100101" "00111100001110100100110101101110" "00111100011111111101111001110010" "10111100011010100111110011100001" "10111101010001000000001010001110" "00111101100110101100110001001111" "00111101001010001111110000001101" "10111100101010010011100011011110" "00111100101101111110110101000010" "00111101011010101010111100110110" "00111101001110110111001100001000" "00111101100110110100000000101101" "10111101100110110100101000100011" "10111100110011011001111010000100" "00111100001111010001101010101000" "10111101100101111110011001110001" "10111101011100110101000010001111" "10111111001101010000010111010001" "10111110000111110011111000000011" "10111110000111011001110100110100" "00111110111010001110100010100111" "00111110101011011001111010000100" "00111110101000110100100101111011" "00111110100100110010011101100111" "00111101101101111011101111111001" "10111100110011101101100100010111" "10111110000111101001011000111110" "00111110000111110010101110101010" "00111011110001110110000101010011" "10111101000011011001110101110111" "10111011111000100101010011110100" "00111101000011011110001010101100" "00111110101001101001101011010100" "00111101001010100110010011000011" "00111110000101111010101000100110" "00111100101111000111100100101101" "10111101000100010001010110011100" "00111011111001101011110001100010" "00111110100100111101100001011010" "00111100011010010100111011100100" "00111101111001011000111101110001" "10111101010000000100000100000011" "00111011110110101010100001011000" "10111011010100010110100111101010" "00111101100110011011000110111000" "00111110000000111111111001011101" "00111101111010101101001011011101" "10111101010100110110110101100101" "00111100111100001001011101000010" "00111110000001110001110111100111" "00111100100101001101111110001011" "00111101011111010001001001000101" "00111011110101001101000010100111" "00111011101001001000000001111101" "00111101100011000010010110001101" "10111101011100110100101001000101" "00111101000001110011011110010111" "10111011110110010000110001110110" "00111101010101110001001010100001" "00111100111000001011000010101111" "10111100010111110101110011110010" "10111101000101101000111010000010" "00111101111000000111010111110111" "00111101010101101111001000011111" "10111101001000111101101100111100" "00111111000001111010011110000111" "10111110110000001110101010011110" "10111110001110100011110000100001" "10111101001000111011101010111010" "10111110111010101000000001001001" "10111101111111010000011111001000" "00111011111000101001100110111110" "10111101111100110110110011011111" "00111110100000000000011010001110" "00111100010101010010110000010111" "00111100011000100001110110010111" "10111100010001100100111111011011" "00111101101101110000000011001110" "00111101101101011000100001011101" "10111110001010111110000011011111" "00111100010010001101100111111001" "00111011110111010111110001000111" "10111101111101011110011101000011" "00111101100001101100010011000110" "10111101101111101010001101011001" "10111110000110001011000001001011" "00111100011110000111001001101101" "00111100110010100000010111011110" "10111101110110010010011001000010" "10111111010010010011110100110010" "10111110100100011101101111001011" "10111100111100001011111100011010" "10111101111001001110110011101010" "00111100110100001000100100011010" "00111101101011100000010000111010" "00111110000001110010110110100001" "00111101001010011001011000110001" "00111110001101110100011010001000" "10111101100100010101010000000000" "00111011100011111111111011100110" "00111101001011111101110110101001" "10111101000110010111101100110001" "00111101100010100000011111110110" "10111100101011110011011111111100" "10111100010000000110111000011010" "00111101100010100100101110011001" "00111100011010110001110001000011" "10111011101000100110001101101101" "00111000111011111101111101001011" "00111101011011010110111011001110" "10111101001001000111100110010010" "00111101100000111101010111111110" "00111101011100110110010110001000" "10111101000010011101111100010001" "00111101010101101010001001101110" "10111101000001000011011011111100" "00111100101000010111110100101000" "00111101100001101111100010101101" "00111100110111011011110110110110" "00111100110100001010101010101000" "10111010001010001111101100001011" "00111101100001110101010101111010" "00111101010111110111101001001110" "10111100000000001011011101001011" "10111100010101111110010001011000" "10111101000011110000110110000100" "00111100100101000001101001101001" "00111011111101101111110111111001" "10111100100000110001001001101111" "10111100110110011011101000011011" "10111100101010111000011000101011" "10111101000000100101010010100100" "10111101011011110010101001011010" "10111011011101011101101110111010" "10111100100001000010010100101001" "00111100001110111110100001111001" "10111100010111101110011110000010" "10111111100001011110100111100010" "10111101001101111100100010001110" "00111101101010011110011011101111" "00111110000001110000011001001111" "10111100011000010000100011000100" "00111101100111001000000100001010" "00111110000001101110011011011010" "00111101111100100111000100110111" "00111110010101110101111000100000" "00111101010000001010110100000100" "10111100011101000111111110011001" "10111101100110000110100110000011" "00111101000100110101101110010010" "00111010101101011000010110001000" "00111100110111111110010101000011" "10111101100000001110100101001111" "00111101100000001100000101110110" "10111100010111001010110100010101" "00111011100111001011100000110010" "00111100101111100111110100010011" "10111101100001000100111110100000" "00111101000111001101000010111011" "00111100010001101111011110100001" "00111100010101011011111011100100" "00111110100111001100001110100000" "00111110001000111101110001001000" "00111110001100110000100101000010" "10111101010100001010110011000001" "00111100000010101010100100111100" "00111110000101001101101111100000" "00111101010101001011111100001010" "10111101110000000100011101001110" "00111101110101111110011001110001" "10111101001010010000010101111101" "10111100111111111011100010110010" "10111101000000101110001000110011" "10111101000000010100010100001111" "10111100110010001001101100001111" "00111100001000001111101100100010" "10111101101011011111000011010100" "00111101001001000111010101100000" "10111100101000001011100000000110" "10111101101101110001110010010111" "10111100101110010000011001000110" "00111101001010100001101101011100" "00111100110111000110011111100000" "00111101110010101111011100001010" "10111101111110101011011101010110" "00111110001000011111100111110000" "00111101110100101111000110101010" "00111100100001011010010011110000" "10111110011101100001000100110100" "10111101101010000110000011011101" "10111100111100111111010100110000" "00111110010100101001010111101010" "00111101101000001011000110111100" "00111100111111110101000111110000" "10111101101011011110101110010110" "00111100010101110011100001100001" "10111100110011110100111010000111" "10111101111001100100110000110000" "10111110000000101001011100111001" "10111101011010010001100101101001" "10111101010000001000010000011111" "10111101100000011001001100101101" "00111011001111101011000010101010" "10111101010011110010000101110001" "00111100010111001111000000110000" "10111100011111111001001011110011" "00111101100110010111011001111001" "00111101001100111101011011000111" "10111100101010010101110010000101" "00111111000100100100101111011100" "00111110100100010000010011010101" "00111101110110101010111101111001" "10111110111111010101101110101011" "10111110011011111011001010101011" "10111101101111110001010010011000" "10111101101101011001000000111010" "00111101011011100110110010001111" "00111110001001000001101100110011" "10111110000111001001110001001110" "10111101111010111100111010000101" "00111101100011000001001000100111" "00111101101010001001011111101010" "00111101011110110101110100000011" "10111101001101101000110111111100" "10111110011100011100000110010100" "10111101111000001000000001110011" "10111101110011011100001100110111" "10111011100101101000011110010110" "10111101011101101001100001111000" "00111101100010011011001100000111" "10111110100011011001101010010101" "00111101000101101111110110101000" "00111101000100111001000000000000" "00111101010010111110010000000100" "00111101111000110110100011110001" "00111101101011011011101011010100" "00111101011001000111010101100000" "00111101000110001100101100001000" "10111101101011010010011011111010" "00111101101010100000011011101010" "00111011011101100111000100001011" "10111100110101010101110001010011" "00111101001000000010101001111000" "00111011101101100001101000000011" "00111101110101100101001010111101" "00111101100111100011110010010111" "10111101000000111101111011101000" "10111101110010010000110001001110" "00111100011000110001100100111111" "00111101100011100100110000001110" "00111101011111110000110111000111" "00111011011000101111101000110110" "10111101000010110011011100000000" "10111100010010000111100110000001" "00111100111001011010001101011101" "00111011011011110000001010000010" "00111100101111001111111101100101" "10111111000001001000100101001100" "00111110101010011111111010000111" "00111110010101111100011011111100" "10111101100100001110001101000111" "00111110110111011001011010100111" "00111101100010110011111101100100" "00111110000010110110110110000111" "00111011010100111000111010001000" "10111110101111100100011110011001" "00111100000011010100010111001110" "10111110001001110110011101001101" "10111110011010000001011011110000" "00111101110000111101110101010101" "10111100111100100100010100101100" "10111101101101100000000101111001" "00111101000100011011011100010111" "10111101100000000111000010111001" "10111100001001101110111111000011" "00111101001110011100011000101010" "10111101010100000100011100001011" "00111101110011110101110000101001" "10111110010001010010000101010111" "10111101110111001111101010101101" "00111001111001010001111001111101" "00111111001101110001110010010111" "00111110001011100110100001011110" "00111101100100110000001011110111" "00111110001110011010010000010110" "00111101000101011101110001000000" "00111100100000100001101011111000" "10111110010011110100010010010001" "10111101001010011011010010011010" "10111110010011000100100110111010" "00111101001110101101110000001010" "00111100100010010111111010011001" "00111100111000110111011110011111" "00111100111101010001100010110001" "10111100000100011010101111111010" "10111101000111110001111000001000" "00111101010101011101111101100101" "10111100011010011101000011101010" "00111100101100010101110101110000" "10111100100100100101011110000110" "00111101111000000110011000111100" "10111101000110101110000111001110" "10111100111101110001100001100101" "10111100110010100110001000100100" "10111101000101101110110111101110" }
set HasInitializer 1
set Initializer $ROMData
set NumOfStage 2
set MaxLatency -1
set DelayBudget 1.352
set ClkPeriod 10
set RegisteredInput 0
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_mem] == "ap_gen_simcore_mem"} {
    eval "ap_gen_simcore_mem { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 1 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
} else {
    puts "@W \[IMPL-102\] Cannot find ap_gen_simcore_mem, check your platform lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
  ::AP::rtl_comp_handler $MemName
}


set CoreName ROM_nP
if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_ROM] == "::AESL_LIB_VIRTEX::xil_gen_ROM"} {
    eval "::AESL_LIB_VIRTEX::xil_gen_ROM { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 1 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
  } else {
    puts "@W \[IMPL-104\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_ROM, check your platform lib"
  }
}


# Memory (RAM/ROM)  definition:
set ID 14
set hasByteEnable 0
set MemName LoopOracle_DataOutC1
set CoreName ap_simcore_mem
set PortList { 2 3 }
set DataWd 32
set AddrRange 38250
set AddrWd 16
set impl_style block
set TrueReset 0
set HasInitializer 0
set IsROM 0
set ROMData {}
set NumOfStage 2
set MaxLatency -1
set DelayBudget 1.352
set ClkPeriod 10
set RegisteredInput 0
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_mem] == "ap_gen_simcore_mem"} {
    eval "ap_gen_simcore_mem { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
} else {
    puts "@W \[IMPL-102\] Cannot find ap_gen_simcore_mem, check your platform lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
  ::AP::rtl_comp_handler $MemName
}


set CoreName RAM
if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_RAM] == "::AESL_LIB_VIRTEX::xil_gen_RAM"} {
    eval "::AESL_LIB_VIRTEX::xil_gen_RAM { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
  } else {
    puts "@W \[IMPL-104\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_RAM, check your platform lib"
  }
}


# Memory (RAM/ROM)  definition:
set ID 15
set hasByteEnable 0
set MemName LoopOracle_DataOutMP1
set CoreName ap_simcore_mem
set PortList { 2 3 }
set DataWd 32
set AddrRange 4662
set AddrWd 13
set impl_style block
set TrueReset 0
set HasInitializer 0
set IsROM 0
set ROMData {}
set NumOfStage 2
set MaxLatency -1
set DelayBudget 1.352
set ClkPeriod 10
set RegisteredInput 0
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_mem] == "ap_gen_simcore_mem"} {
    eval "ap_gen_simcore_mem { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
} else {
    puts "@W \[IMPL-102\] Cannot find ap_gen_simcore_mem, check your platform lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
  ::AP::rtl_comp_handler $MemName
}


set CoreName RAM
if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_RAM] == "::AESL_LIB_VIRTEX::xil_gen_RAM"} {
    eval "::AESL_LIB_VIRTEX::xil_gen_RAM { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
  } else {
    puts "@W \[IMPL-104\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_RAM, check your platform lib"
  }
}


# Memory (RAM/ROM)  definition:
set ID 16
set hasByteEnable 0
set MemName LoopOracle_DataOutC2
set CoreName ap_simcore_mem
set PortList { 2 3 }
set DataWd 32
set AddrRange 8928
set AddrWd 14
set impl_style block
set TrueReset 0
set HasInitializer 0
set IsROM 0
set ROMData {}
set NumOfStage 2
set MaxLatency -1
set DelayBudget 1.352
set ClkPeriod 10
set RegisteredInput 0
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_mem] == "ap_gen_simcore_mem"} {
    eval "ap_gen_simcore_mem { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
} else {
    puts "@W \[IMPL-102\] Cannot find ap_gen_simcore_mem, check your platform lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
  ::AP::rtl_comp_handler $MemName
}


set CoreName RAM
if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_RAM] == "::AESL_LIB_VIRTEX::xil_gen_RAM"} {
    eval "::AESL_LIB_VIRTEX::xil_gen_RAM { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
  } else {
    puts "@W \[IMPL-104\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_RAM, check your platform lib"
  }
}


# Memory (RAM/ROM)  definition:
set ID 17
set hasByteEnable 0
set MemName LoopOracle_DataOutMP2
set CoreName ap_simcore_mem
set PortList { 2 3 }
set DataWd 32
set AddrRange 1080
set AddrWd 11
set impl_style block
set TrueReset 0
set HasInitializer 0
set IsROM 0
set ROMData {}
set NumOfStage 2
set MaxLatency -1
set DelayBudget 1.352
set ClkPeriod 10
set RegisteredInput 0
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_mem] == "ap_gen_simcore_mem"} {
    eval "ap_gen_simcore_mem { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
} else {
    puts "@W \[IMPL-102\] Cannot find ap_gen_simcore_mem, check your platform lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
  ::AP::rtl_comp_handler $MemName
}


set CoreName RAM
if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_RAM] == "::AESL_LIB_VIRTEX::xil_gen_RAM"} {
    eval "::AESL_LIB_VIRTEX::xil_gen_RAM { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
  } else {
    puts "@W \[IMPL-104\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_RAM, check your platform lib"
  }
}


# Memory (RAM/ROM)  definition:
set ID 18
set hasByteEnable 0
set MemName LoopOracle_DataOutC3
set CoreName ap_simcore_mem
set PortList { 2 3 }
set DataWd 32
set AddrRange 1904
set AddrWd 11
set impl_style block
set TrueReset 0
set HasInitializer 0
set IsROM 0
set ROMData {}
set NumOfStage 2
set MaxLatency -1
set DelayBudget 1.352
set ClkPeriod 10
set RegisteredInput 0
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_mem] == "ap_gen_simcore_mem"} {
    eval "ap_gen_simcore_mem { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
} else {
    puts "@W \[IMPL-102\] Cannot find ap_gen_simcore_mem, check your platform lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
  ::AP::rtl_comp_handler $MemName
}


set CoreName RAM
if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_RAM] == "::AESL_LIB_VIRTEX::xil_gen_RAM"} {
    eval "::AESL_LIB_VIRTEX::xil_gen_RAM { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
  } else {
    puts "@W \[IMPL-104\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_RAM, check your platform lib"
  }
}


# Memory (RAM/ROM)  definition:
set ID 19
set hasByteEnable 0
set MemName LoopOracle_DataOutMP3
set CoreName ap_simcore_mem
set PortList { 2 3 }
set DataWd 32
set AddrRange 192
set AddrWd 8
set impl_style block
set TrueReset 0
set HasInitializer 0
set IsROM 0
set ROMData {}
set NumOfStage 2
set MaxLatency -1
set DelayBudget 1.352
set ClkPeriod 10
set RegisteredInput 0
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_mem] == "ap_gen_simcore_mem"} {
    eval "ap_gen_simcore_mem { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
} else {
    puts "@W \[IMPL-102\] Cannot find ap_gen_simcore_mem, check your platform lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
  ::AP::rtl_comp_handler $MemName
}


set CoreName RAM
if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_RAM] == "::AESL_LIB_VIRTEX::xil_gen_RAM"} {
    eval "::AESL_LIB_VIRTEX::xil_gen_RAM { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
  } else {
    puts "@W \[IMPL-104\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_RAM, check your platform lib"
  }
}


# clear list
if {${::AESL::PGuard_autoexp_gen}} {
    cg_default_interface_gen_dc_begin
    cg_default_interface_gen_bundle_begin
    AESL_LIB_XILADAPTER::native_axis_begin
}

# XIL_BRAM:
if {${::AESL::PGuard_autoexp_gen}} {
if {[info proc ::AESL_LIB_XILADAPTER::xil_bram_gen] == "::AESL_LIB_XILADAPTER::xil_bram_gen"} {
eval "::AESL_LIB_XILADAPTER::xil_bram_gen { \
    id 20 \
    name DataInTr \
    reset_level 1 \
    sync_rst true \
    dir I \
    corename DataInTr \
    op interface \
    ports { DataInTr_address0 { O 15 vector } DataInTr_ce0 { O 1 bit } DataInTr_q0 { I 32 vector } } \
} "
} else {
puts "@W \[IMPL-110\] Cannot find bus interface model in the library. Ignored generation of bus interface for 'DataInTr'"
}
}


# XIL_BRAM:
if {${::AESL::PGuard_autoexp_gen}} {
if {[info proc ::AESL_LIB_XILADAPTER::xil_bram_gen] == "::AESL_LIB_XILADAPTER::xil_bram_gen"} {
eval "::AESL_LIB_XILADAPTER::xil_bram_gen { \
    id 21 \
    name CnnOut \
    reset_level 1 \
    sync_rst true \
    dir O \
    corename CnnOut \
    op interface \
    ports { CnnOut_address0 { O 1 vector } CnnOut_ce0 { O 1 bit } CnnOut_we0 { O 1 bit } CnnOut_d0 { O 32 vector } CnnOut_address1 { O 1 vector } CnnOut_ce1 { O 1 bit } CnnOut_we1 { O 1 bit } CnnOut_d1 { O 32 vector } } \
} "
} else {
puts "@W \[IMPL-110\] Cannot find bus interface model in the library. Ignored generation of bus interface for 'CnnOut'"
}
}


# Direct connection:
if {${::AESL::PGuard_autoexp_gen}} {
eval "cg_default_interface_gen_dc { \
    id -1 \
    name ap_ctrl \
    type ap_ctrl \
    reset_level 1 \
    sync_rst true \
    corename ap_ctrl \
    op interface \
    ports { ap_start { I 1 bit } ap_ready { O 1 bit } ap_done { O 1 bit } ap_idle { O 1 bit } } \
} "
}


# Adapter definition:
set PortName ap_clk
set DataWd 1 
if {${::AESL::PGuard_autoexp_gen}} {
if {[info proc cg_default_interface_gen_clock] == "cg_default_interface_gen_clock"} {
eval "cg_default_interface_gen_clock { \
    id -2 \
    name ${PortName} \
    reset_level 1 \
    sync_rst true \
    corename apif_ap_clk \
    data_wd ${DataWd} \
    op interface \
}"
} else {
puts "@W \[IMPL-113\] Cannot find bus interface model in the library. Ignored generation of bus interface for '${PortName}'"
}
}


# Adapter definition:
set PortName ap_rst
set DataWd 1 
if {${::AESL::PGuard_autoexp_gen}} {
if {[info proc cg_default_interface_gen_reset] == "cg_default_interface_gen_reset"} {
eval "cg_default_interface_gen_reset { \
    id -3 \
    name ${PortName} \
    reset_level 1 \
    sync_rst true \
    corename apif_ap_rst \
    data_wd ${DataWd} \
    op interface \
}"
} else {
puts "@W \[IMPL-114\] Cannot find bus interface model in the library. Ignored generation of bus interface for '${PortName}'"
}
}



# merge
if {${::AESL::PGuard_autoexp_gen}} {
    cg_default_interface_gen_dc_end
    cg_default_interface_gen_bundle_end
    AESL_LIB_XILADAPTER::native_axis_end
}


